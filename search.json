[{"path":"https://docs.ropensci.org/autotest/articles/autotest-control.html","id":"rd-files-example-code-and-the-autotest-workflow","dir":"Articles","previous_headings":"","what":"1. .Rd files, example code, and the autotest workflow","title":"Control of tests","text":"understand autotest , first necessary understand bit structure documentation files R package, contained files called \".Rd\" files. Tests constructed parsing individual .Rd documentation files extract example code, identifying parameters passed specified functions, mutating parameters. general procedure can illustrated examining specific function, now choose cor function, relative simplicity. following lines extract documentation cor function, .html version can seen clicking link . Note web page reveals name .Rd file “cor” (upper left corner), meaning name .Rd file \"cor.Rd\". following lines extract content, first loading entire .Rd database stats package. database list, entry holding contents one .Rd file object class Rd, essentially large nested list components corresponding various .Rd tags \\arguments, \\details, \\value. internal function tools package can used extract individual components (using ::: notation access internal functions). example, single .Rd file often describes functionality several functions, identified specifying function name \"alias\". aliases \"cor.Rd\" file : one file thus contains documentation four functions. Example code can extracted dedicated function tools package: entire content \\examples portion \"cor.Rd\", can confirmed comparing online version.","code":"rd <- tools::Rd_db (package = \"stats\") cor_rd <- rd [[grep (\"^cor\\\\.Rd\", names (rd))]] tools:::.Rd_get_metadata (cor_rd, \"alias\") #> [1] \"var\"     \"cov\"     \"cor\"     \"cov2cor\" tools::Rd2ex (cor_rd) #> ### Name: cor #> ### Title: Correlation, Variance and Covariance (Matrices) #> ### Aliases: var cov cor cov2cor #> ### Keywords: univar multivariate array #>  #> ### ** Examples #>  #> var(1:10)  # 9.166667 #>  #> var(1:5, 1:5) # 2.5 #>  #> ## Two simple vectors #> cor(1:10, 2:11) # == 1 #>  #> ## Correlation Matrix of Multivariate sample: #> (Cl <- cor(longley)) #> ## Graphical Correlation Matrix: #> symnum(Cl) # highly correlated #>  #> ## Spearman's rho  and  Kendall's tau #> symnum(clS <- cor(longley, method = \"spearman\")) #> symnum(clK <- cor(longley, method = \"kendall\")) #> ## How much do they differ? #> i <- lower.tri(Cl) #> cor(cbind(P = Cl[i], S = clS[i], K = clK[i])) #>  #>  #> ## cov2cor() scales a covariance matrix by its diagonal #> ##           to become the correlation matrix. #> cov2cor # see the function definition {and learn ..} #> stopifnot(all.equal(Cl, cov2cor(cov(longley))), #>           all.equal(cor(longley, method = \"kendall\"), #>             cov2cor(cov(longley, method = \"kendall\")))) #>  #> ##--- Missing value treatment: #> C1 <- cov(swiss) #> range(eigen(C1, only.values = TRUE)$values) # 6.19        1921 #>  #> ## swM := \"swiss\" with  3 \"missing\"s : #> swM <- swiss #> colnames(swM) <- abbreviate(colnames(swiss), minlength=6) #> swM[1,2] <- swM[7,3] <- swM[25,5] <- NA # create 3 \"missing\" #>  #> ## Consider all 5 \"use\" cases : #> (C. <- cov(swM)) # use=\"everything\"  quite a few NA's in cov.matrix #> try(cov(swM, use = \"all\")) # Error: missing obs... #> C2 <- cov(swM, use = \"complete\") #> stopifnot(identical(C2, cov(swM, use = \"na.or.complete\"))) #> range(eigen(C2, only.values = TRUE)$values) # 6.46   1930 #> C3 <- cov(swM, use = \"pairwise\") #> range(eigen(C3, only.values = TRUE)$values) # 6.19   1938 #>  #> ## Kendall's tau doesn't change much: #> symnum(Rc <- cor(swM, method = \"kendall\", use = \"complete\")) #> symnum(Rp <- cor(swM, method = \"kendall\", use = \"pairwise\")) #> symnum(R. <- cor(swiss, method = \"kendall\")) #>  #> ## \"pairwise\" is closer componentwise, #> summary(abs(c(1 - Rp/R.))) #> summary(abs(c(1 - Rc/R.))) #>  #> ## but \"complete\" is closer in Eigen space: #> EV <- function(m) eigen(m, only.values=TRUE)$values #> summary(abs(1 - EV(Rp)/EV(R.)) / abs(1 - EV(Rc)/EV(R.)))"},{"path":"https://docs.ropensci.org/autotest/articles/autotest-control.html","id":"internal-structure-of-the-autotest-workflow","dir":"Articles","previous_headings":"","what":"2. Internal structure of the autotest workflow","title":"Control of tests","text":".Rd file package, autotest tests code given example section according following general steps: Extract example lines .Rd file, demonstrated ; Identify function aliases described file; Identify points functions called; Identify objects passed values, including values, classes, attributes, properties. Identify parameters explicitly passed example code, defined via default value; Mutate values parameters according kinds test described autotest_types(). Calling autotest_package(..., test = FALSE) implements first 5 6 steps, returns data possible mutations parameter, setting test = TRUE actually passes mutated parameters specified functions, returns reports unexpected behaviour.","code":""},{"path":"https://docs.ropensci.org/autotest/articles/autotest-control.html","id":"autotest-ing-the-statscov-function","dir":"Articles","previous_headings":"","what":"3. autotest-ing the stats::cov function","title":"Control of tests","text":"preceding sections describe autotest actually works, present section demonstrates package typically used practice. demonstrated README, information tests implemented within package can obtained calling autotest_types() function. main function testing package autotest_package(). nominated package can either installed package, full path local directory containing package’s source code. default .Rd files package tested, restriction specified functions possible either nominating functions exclude testing (via exclude parameter), functions include (via functions parameter). functions parameter intended enable testing specified functions, exclude parameter intended enable testing functions except specified parameter. Specifying values parameters generally recommended.","code":""},{"path":"https://docs.ropensci.org/autotest/articles/autotest-control.html","id":"listing-tests-without-conducting-them","dir":"Articles","previous_headings":"3. autotest-ing the stats::cov function","what":"3.1 Listing tests without conducting them","title":"Control of tests","text":"following demonstrates results autotest-ing cor function stats package, noting default call uses test = FALSE, returns details tests without actually implementing (reason name object xf “false”): object returned autotest_package() simple tibble, row detailing one test applied listed functions parameters. tests conducted, tests generally type \"dummy\". case, however, see following: addition 15 dummy tests, function also returns 0 warnings, corresponding rows : Although auotest package primarily intended apply mutation tests parameters functions package, requires identifying parameter types classes parsing example code. parameters function neither demonstrated within example code, given default values can tested, possible determine expected types. result reveals neither use parameter var function, y parameter cov, demonstrated example code, triggering warning parameter unable tested.","code":"xf <- autotest_package (package = \"stats\", functions = \"cor\") print (xf) #> # A tibble: 15 × 8 #>    type  test_name      fn_name parameter parameter_type operation content test  #>    <chr> <chr>          <chr>   <chr>     <chr>          <chr>     <chr>   <lgl> #>  1 dummy single_char_c… cor     use       single_charac… lower-ca… (Shoul… TRUE  #>  2 dummy single_char_c… cor     use       single_charac… upper-ca… (Shoul… TRUE  #>  3 dummy single_par_as… cor     use       single_charac… Length 2… Should… TRUE  #>  4 dummy return_succes… cor     (return … (return objec… Check th… NA      TRUE  #>  5 dummy return_val_de… cor     (return … (return objec… Check th… NA      TRUE  #>  6 dummy return_desc_i… cor     (return … (return objec… Check wh… NA      TRUE  #>  7 dummy return_class_… cor     (return … (return objec… Compare … NA      TRUE  #>  8 dummy par_is_docume… cor     x         NA             Check th… NA      TRUE  #>  9 dummy par_matches_d… cor     x         NA             Check th… NA      TRUE  #> 10 dummy par_is_docume… cor     use       NA             Check th… NA      TRUE  #> 11 dummy par_matches_d… cor     use       NA             Check th… NA      TRUE  #> 12 dummy par_is_docume… cor     method    NA             Check th… NA      TRUE  #> 13 dummy par_matches_d… cor     method    NA             Check th… NA      TRUE  #> 14 dummy par_is_docume… cor     y         NA             Check th… NA      TRUE  #> 15 dummy par_matches_d… cor     y         NA             Check th… NA      TRUE table (xf$type) #>  #> dummy  #>    15 xf [xf$type != \"dummy\", c (\"fn_name\", \"parameter\", \"operation\", \"content\")] #> # A tibble: 0 × 4 #> # ℹ 4 variables: fn_name <chr>, parameter <chr>, operation <chr>, content <chr>"},{"path":"https://docs.ropensci.org/autotest/articles/autotest-control.html","id":"conducting-tests","dir":"Articles","previous_headings":"3. autotest-ing the stats::cov function","what":"3.2 Conducting tests","title":"Control of tests","text":"15 tests listed type == \"dummy\" can applied nominated functions parameters calling function test = TRUE. yields following results (object names xt “true”): 15 tests yielded 5 unexpected responses. best way understand results examine object detail, typically edit(xt), equivalently RStudio, clicking listed object. different types tests produced unexpected responses : Two reflect previous results regarding parameters unable tested, remainder come two types tests. Information precise results contained content column, although case fairly straightforward see operation “upper case character parameter” arises use method parameters cor cov functions case-dependent, accepted lower case form. operation conversion vectors list-column format, described first vignette.","code":"xt <- autotest_package (package = \"stats\",                         functions = \"cor\",                         test = TRUE) print (xt) table (xt1$operation) #>  #> Check that documentation matches class of input parameter  #>                                                         4  #>                            upper-case character parameter  #>                                                         1"},{"path":"https://docs.ropensci.org/autotest/articles/autotest-control.html","id":"controlling-which-tests-are-conducted","dir":"Articles","previous_headings":"3. autotest-ing the stats::cov function","what":"3.4 Controlling which tests are conducted","title":"Control of tests","text":"test parameter autotest_package() function can used control whether tests conducted . Finer-level control tests can achieved specifying test_data parameter. parameter must object class autotest_package, returned either autotest_types()] autotest_package() functions. former function specifies unique tests, returns relatively small tibble 27 rows. following lines demonstrate switch list-column test functions parameters: result now four rows test == FALSE, type == \"no_test\", indicating tests actually conducted. also makes apparent role test flags. initially calling autotest_package() default test = FALSE, result contains test column values TRUE. Although potentially perplexing first, value must understood relation type column. type \"dummy\" indicates test conducted, case test = TRUE control flag used determine conducted data submitted test_data parameter. type values \"dummy\", test column specifies whether test actually conducted. preceding example showed results autotest_types() can used control tests implemented entire package. Finer-scale control can achieved modifying individual rows full table returned autotest_package(). following code demonstrates showing list-column tests can switched particular functions, starting xf data dummy tests generated . procedures illustrate three successively finer levels control tests, switching : Entire packages; Specified functions ; Specific parameters particular functions .","code":"types <- autotest_types() types$test [grep (\"list_col\", types$test_name)] <- FALSE xt2 <- autotest_package (package = \"stats\",                          functions = \"cor\",                          test = TRUE,                          test_data = types) print (xt2) #> # A tibble: 5 × 8 #>   type       test_name  fn_name parameter parameter_type operation content test  #>   <chr>      <chr>      <chr>   <chr>     <chr>          <chr>     <chr>   <lgl> #> 1 warning    par_match… cor     x         NA             Check th… Parame… TRUE  #> 2 warning    par_match… cor     y         NA             Check th… Parame… TRUE  #> 3 warning    par_match… cor     x         NA             Check th… Parame… TRUE  #> 4 warning    par_match… cor     y         NA             Check th… Parame… TRUE  #> 5 diagnostic single_ch… cor     use       single charac… upper-ca… is cas… TRUE xf <- autotest_package (package = \"stats\",                         functions = \"cor\") xf$test [grepl (\"list_col\", xf$test_name) & xf$fn_name == \"var\"] <- FALSE xt3 <- autotest_package (package = \"stats\",                          functions = \"cor\",                          test = TRUE,                          test_data = xf) print (xt3) #> # A tibble: 5 × 8 #>   type       test_name  fn_name parameter parameter_type operation content test  #>   <chr>      <chr>      <chr>   <chr>     <chr>          <chr>     <chr>   <lgl> #> 1 warning    par_match… cor     x         NA             Check th… Parame… TRUE  #> 2 warning    par_match… cor     y         NA             Check th… Parame… TRUE  #> 3 warning    par_match… cor     x         NA             Check th… Parame… TRUE  #> 4 warning    par_match… cor     y         NA             Check th… Parame… TRUE  #> 5 diagnostic single_ch… cor     use       single charac… upper-ca… is cas… TRUE"},{"path":"https://docs.ropensci.org/autotest/articles/autotest-control.html","id":"autotest-ing-your-package","dir":"Articles","previous_headings":"","what":"4. autotest-ing your package","title":"Control of tests","text":"autotest can easily incorporated package’s tests/ directory via simple testthat expectations: expect_autotest_no_testdata, expect autotest_package work package default values including additional test_data specifying tests run; expect_autotest_testdata, used specific tests switched . Using requires adding autotest Suggests list package’s DESCRIPTION file, along testthat. Note use testing frameworks testthat possible writing custom expectations output autotest_package(), considered . use expectations, must first decide , , tests judge applicable package, switch following procedure described (, package level modifying test flag object returned autotest_types(), finer function- parameter-levels modifying equivalent values object returned autotest_package(..., test = FALSE). objects must passed test_data parameter autotest_package(). consider tests applicable, autotest_package() can called without specifying parameter. switch tests via test_data parameter, expect_autotest expectation requires append additional column test_data object called \"note\" (case-insensitive), include note row test = FALSE explaining tests switched . Lines test directory look something like : procedure requiring additional \"note\" column ensures test suite explicitly include explanations deem particular tests applicable package. contrast, following expectation used autotest_package() passes tests implemented, case parameters need passed expectation, tests confirm warnings errors generated.","code":"library (testthat) # as called in your test suite # For example, to switch off vector-to-list-column tests: test_data <- autotest_types (notest = \"vector_to_list_col\") test_data$note <- \"\" test_data$note [test_data$test == \"vector_to_list_col\"] <-     \"These tests are not applicable because ...\" expect_success (expect_autotest_testdata (test_data)) expect_success (expect_autotest_no_testdata ())"},{"path":"https://docs.ropensci.org/autotest/articles/autotest-control.html","id":"finer-control-over-testing-expectations","dir":"Articles","previous_headings":"4. autotest-ing your package","what":"4.2 Finer control over testing expectations","title":"Control of tests","text":"two expectations shown call autotest_package() function internally, assert results follow expected pattern. also three additional testthat expectations can applied pre-generated autotest objects, allow finer control testing expectations. : expect_autotest_no_err expect errors results autotest_package(); expect_autotest_no_warn expect warnings; expect_autotest_notes expect tests switched additional \"note\" column explaining . tests demonstrated one testing files used package, following lines recreate demonstrate general process. first two expectations object free warnings errors. tests implemented applied stats::cov() function, actually triggers warnings two parameters usage demonstrated example code. tests therefore expect_failure(), generally expect_success() throughout. test files affirms simply passing object, x, tests flagged type == \"no_test\", yet without explaining additional \"note\" column, cause expect_autotest() fail. following line, removing logical testthat expectation, demonstrates: demonstrated , expect_autotest_... calls always wrapped direct testhat expectation expect_success(). achieve success case, need append additional \"note\" column containing explanations test switched : general, using autotest package’s test suite simple adding autotest Suggests, wrapping either expect_autotest_no_testdata expect_autotest_testdata expect_success call.","code":"library (testthat) # as called in your test suite # For example, to switch off vector-to-list-column tests: test_data <- autotest_types (notest = \"vector_to_list_col\") x <- autotest_package (package = \"stats\",                        functions = \"cov\",                        test = TRUE,                        test_data = test_data)         expect_success (expect_autotest_no_err (x)) expect_failure (expect_autotest_no_warn (x)) # should expect_success!! expect_autotest_notes (x) x$note <- \"\" x [grep (\"vector_to_list\", x$test_name), \"note\"] <-   \"these tests have been switched off because ...\"  expect_success (expect_autotest_notes (x))"},{"path":"https://docs.ropensci.org/autotest/articles/autotest.html","id":"integer-input","dir":"Articles","previous_headings":"","what":"Integer input","title":"How to use autotest","text":"Note autotest distinguishes integer non-integer types storage.mode \"integer\" \"double\", respective classes \"integer\" \"numeric\", \"numeric\" ambiguous R, .numeric(1L) TRUE, even though storage.mode(1L) \"integer\", \"numeric\". Replacing x = 1 x = 1. explicitly identifies parameter \"double\" parameter, allowed preceding tests pass. Note happens instead specify parameter integer (x = 1L). generates two additional messages, second reflects expectation parameters assumed integer-valued assert , example converting .integer(). following suffices remove message. remaining message concerns integer ranges. parameters autotest identifies single integers, routines try full range values +/- .Machine$integer.max, ensure values appropriately handled. Many routines may sensibly allow unrestricted ranges, many others may implement explicit control permissible ranges, yet may error , example, unexpectedly large positive negative values. content diagnostic message indicates one way resolve issue, simply describing input \"unrestricted\". alternative, frequently better way, ensure document specific control permissible ranges, following revision function. Respective limits ranges may specified following words: Lower limits: “”, “greater”, “larger ”, “lower limit ”, “” Upper limits: “less”, “lower”, “smaller ”, “upper limit ”, “”","code":"code [6] <- gsub (\"1\\\\.\", \"1L\", code [6]) writeLines (code, file.path (path, \"R\", \"myfn.R\")) roxygen2::roxygenise (path) #> ℹ Loading demo #> Writing my_function.Rd x2 <- autotest_package (path, test = TRUE) #>  #> ── autotesting demo ── #>  #> ✔ [1 / 1]: my_function DT::datatable (x2, options = list (dom = \"t\")) code <- c (code [1:12],            \"  if (is.numeric (x))\",            \"    x <- as.integer (x)\",            code [13:length (code)]) code [3] <- gsub (\"An input\", \"An unrestricted input\", code [3]) writeLines (code, file.path (path, \"R\", \"myfn.R\")) roxygen2::roxygenise (path) #> ℹ Loading demo #> Writing my_function.Rd autotest_package (path, test = TRUE) #>  #> ── autotesting demo ── #>  #> ✔ [1 / 1]: my_function #> NULL code <- c (\"#' my_function\",            \"#'\",            \"#' @param x An input between 0 and 10\",            \"#' @return Something else\",            \"#' @examples\",            \"#' y <- my_function (x = 1L)\",            \"#' @export\",            \"my_function <- function (x) {\",            \"  if (length(x) > 1) {\",            \"    warning(\\\"only the first value of x will be used\\\")\",            \"    x <- x [1]\",            \"  }\",            \"  if (is.numeric (x))\",            \"    x <- as.integer (x)\",            \"  if (x < 0 | x > 10) {\",            \"    stop (\\\"x must be between 0 and 10\\\")\",            \"  }\",            \"  return (x + 1L)\",            \"}\") writeLines (code, file.path (path, \"R\", \"myfn.R\")) roxygen2::roxygenise (path) #> ℹ Loading demo #> Writing my_function.Rd autotest_package (path, test = TRUE) #>  #> ── autotesting demo ── #>  #> ✔ [1 / 1]: my_function #> NULL"},{"path":"https://docs.ropensci.org/autotest/articles/autotest.html","id":"vector-input","dir":"Articles","previous_headings":"","what":"Vector input","title":"How to use autotest","text":"initial test results suggested input assumed length one. Let us now revert function original format accepted vectors length > 1, include example demonstrating input. Note first example longer x = 1L. vector inputs identified integer examining individual values, presuming integer representations parameters values whole numbers, regardless storage.mode.","code":"code <- c (\"#' my_function\",            \"#'\",            \"#' @param x An input\",            \"#' @return Something else\",            \"#' @examples\",            \"#' y <- my_function (x = 1)\",            \"#' y <- my_function (x = 1:2)\",            \"#' @export\",            \"my_function <- function (x) {\",            \"  if (is.numeric (x)) {\",            \"    x <- as.integer (x)\",            \"  }\",            \"  return (x + 1L)\",            \"}\") writeLines (code, file.path (path, \"R\", \"myfn.R\")) roxygen2::roxygenise (path) #> ℹ Loading demo #> Writing my_function.Rd x3 <- autotest_package (path, test = TRUE) #>  #> ── autotesting demo ── #>  #> ✔ [1 / 1]: my_function DT::datatable (x3, options = list (dom = \"t\"))"},{"path":"https://docs.ropensci.org/autotest/articles/autotest.html","id":"list-column-conversion","dir":"Articles","previous_headings":"Vector input","what":"List-column conversion","title":"How to use autotest","text":"result reflects one standard tests, determine whether list-column formats appropriately processed. List-columns commonly arise using (either directly indirectly), tidyr::nest() function, equivalently base R AsIs function. look like : use packages like tidyr purrr quite often leads tibble-class inputs contain list-columns. functions fail identify appropriately respond inputs may generate unexpected errors, autotest intended enforce appropriate handling kinds inputs. following lines demonstrate kinds results can arise without checks. contrast, many functions either assume inputs lists, convert , implicitly unlist. Either way, functions may respond entirely consistently regardless presence list-columns, like : list-column autotest intended enforce consistent behaviour response list-column inputs. One way identify list-column formats check value class(unclass(.)) column. unclass function necessary first remove additional class attributes, dat$x . modified version function identifies responds list-column inputs might look like : change leads clean autotest results: course simply attempting unlist complex list-column may dangerous, may preferable issue kind message warning, even either simply remove list-columns entirely generate error. Replacing , potentially dangerous, line, x <- unlist (x) simple stop(\"list-columns allowed\") also produce clean autotest results.","code":"dat <- data.frame (x = 1:3, y = 4:6) dat$x <- I (as.list (dat$x)) # base R dat <- tidyr::nest (dat, y = y) print (dat) #> # A tibble: 3 × 2 #>   x         y                #>   <I<list>> <list>           #> 1 <int [1]> <tibble [1 × 1]> #> 2 <int [1]> <tibble [1 × 1]> #> 3 <int [1]> <tibble [1 × 1]> m <- mtcars head (m, n = 2L) #>               mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4      21   6  160 110  3.9 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4 m$mpg <- I (as.list (m$mpg)) head (m, n = 2L) # looks exaxtly the same #>               mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4      21   6  160 110  3.9 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4 cor (m) #> Error in cor(m): 'x' must be numeric m$mpg <- paste0 (\"a\", m$mpg) class (m$mpg) #> [1] \"character\" code <- c (\"#' my_function\",            \"#'\",            \"#' @param x An input\",            \"#' @return Something else\",            \"#' @examples\",            \"#' y <- my_function (x = 1)\",            \"#' y <- my_function (x = 1:2)\",            \"#' @export\",            \"my_function <- function (x) {\",            \"  if (methods::is (unclass (x), \\\"list\\\")) {\",            \"    x <- unlist (x)\",            \"  }\",            \"  if (is.numeric (x)) {\",            \"    x <- as.integer (x)\",            \"  }\",            \"  return (x + 1L)\",            \"}\") writeLines (code, file.path (path, \"R\", \"myfn.R\")) roxygen2::roxygenise (path) #> ℹ Loading demo autotest_package (path, test = TRUE) #>  #> ── autotesting demo ── #>  #> ✔ [1 / 1]: my_function #> NULL"},{"path":"https://docs.ropensci.org/autotest/articles/autotest.html","id":"return-results-and-documentation","dir":"Articles","previous_headings":"","what":"Return results and documentation","title":"How to use autotest","text":"Functions return complicated results, objects specific classes, need document class types, autotest compares return objects documentation ensure done. following code constructs new function demonstrate ways autotest inspects return objects, demonstrating vector input (length(x) > 1) example avoid messages regarding length checks integer ranges. Several new diagnostic messages issued regarding description returned value. Let’s insert description see effect. result still contains couple diagnostic messages, now pretty clear need , precise specification class return object. following suffices generate clean autotest results.","code":"code <- c (\"#' my_function3\",            \"#'\",            \"#' @param x An input\",            \"#' @examples\",            \"#' y <- my_function3 (x = 1:2)\",            \"#' @export\",            \"my_function3 <- function (x) {\",            \"  return (datasets::iris)\",            \"}\") writeLines (code, file.path (path, \"R\", \"myfn3.R\")) roxygen2::roxygenise (path) # need to update docs with seed param #> ℹ Loading demo #> Writing NAMESPACE #> Writing my_function3.Rd x4 <- autotest_package (path, test = TRUE) #>  #> ── autotesting demo ── #>  #> ✔ [1 / 2]: my_function #> ✔ [2 / 2]: my_function3 DT::datatable (x4, options = list (dom = \"t\")) code <- c (code [1:3],            \"#' @return The iris data set as dataframe\",            code [4:length (code)]) writeLines (code, file.path (path, \"R\", \"myfn3.R\")) roxygen2::roxygenise (path) # need to update docs with seed param #> ℹ Loading demo #> Writing my_function3.Rd x5 <- autotest_package (path, test = TRUE) #>  #> ── autotesting demo ── #>  #> ✔ [1 / 2]: my_function #> ✔ [2 / 2]: my_function3 DT::datatable (x5, options = list (dom = \"t\")) code [4] <- \"#' @return The iris data set as data.frame\" writeLines (code, file.path (path, \"R\", \"myfn3.R\")) roxygen2::roxygenise (path) # need to update docs with seed param #> ℹ Loading demo #> Writing my_function3.Rd autotest_package (path, test = TRUE) #>  #> ── autotesting demo ── #>  #> ✔ [1 / 2]: my_function #> ✔ [2 / 2]: my_function3 #> NULL"},{"path":"https://docs.ropensci.org/autotest/articles/autotest.html","id":"documentation-of-input-parameters","dir":"Articles","previous_headings":"Return results and documentation","what":"Documentation of input parameters","title":"How to use autotest","text":"Similar checks performed documentation input parameters, demonstrated following modified version preceding function. warning indicates precisely can rectified, example replacing third line ","code":"code <- c (\"#' my_function3\",            \"#'\",            \"#' @param x An input\",            \"#' @return The iris data set as data.frame\",            \"#' @examples\",            \"#' y <- my_function3 (x = datasets::iris)\",            \"#' @export\",            \"my_function3 <- function (x) {\",            \"  return (x)\",            \"}\") writeLines (code, file.path (path, \"R\", \"myfn3.R\")) roxygen2::roxygenise (path) # need to update docs with seed param #> ℹ Loading demo #> Writing my_function3.Rd x6 <- autotest_package (path, test = TRUE) #>  #> ── autotesting demo ── #>  #> ✔ [1 / 2]: my_function #> ✔ [2 / 2]: my_function3 DT::datatable (x6, options = list (dom = \"t\")) code [3] <- \"#' @param x An input which can be a data.frame\""},{"path":"https://docs.ropensci.org/autotest/articles/autotest.html","id":"general-procedure","dir":"Articles","previous_headings":"","what":"General Procedure","title":"How to use autotest","text":"demonstrations hopefully suffice indicate general procedure autotest attempts make simple possible. procedure consists following single point: moment develop first function, every single time modify code, whatever steps necessary ensure autotest_package() returns NULL. vignette demonstrated tests included package, long use autotest throughout entire process package development, additional diagnostic messages include sufficient information able restructure code avoid .","code":""},{"path":"https://docs.ropensci.org/autotest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Padgham. Author, maintainer. Jouni Helske. Contributor.","code":""},{"path":"https://docs.ropensci.org/autotest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Padgham M (2024). autotest: Automatic Package Testing. R package version 0.0.2.207,  https://github.com/ropensci-review-tools/autotest, https://docs.ropensci.org/autotest/.","code":"@Manual{,   title = {autotest: Automatic Package Testing},   author = {Mark Padgham},   year = {2024},   note = {R package version 0.0.2.207,  https://github.com/ropensci-review-tools/autotest},   url = {https://docs.ropensci.org/autotest/}, }"},{"path":"https://docs.ropensci.org/autotest/index.html","id":"autotest-","dir":"","previous_headings":"","what":"Automatic Package Testing","title":"Automatic Package Testing","text":"Automatic mutation testing R packages. Mutation sense mutating inputs (parameters) function calls. autotest primarily works scraping documented examples functions, mutating parameters input functions.","code":""},{"path":"https://docs.ropensci.org/autotest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Automatic Package Testing","text":"easiest way install package via associated r-universe. shown , simply enable universe install usual way , Alternatively, package can installed running one following lines: package can loaded usual way:","code":"options (repos = c (     ropenscireviewtools = \"https://ropensci-review-tools.r-universe.dev\",     CRAN = \"https://cloud.r-project.org\" )) install.packages (\"autotest\") # install.packages(\"remotes\") remotes::install_git (\"https://git.sr.ht/~mpadge/autotest\") remotes::install_bitbucket (\"mpadge/autotest\") remotes::install_gitlab (\"mpadge/autotest\") remotes::install_github (\"ropensci-review-tools/autotest\") library (autotest)"},{"path":"https://docs.ropensci.org/autotest/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Automatic Package Testing","text":"simply way use package main argument autotest_package() function can either name installed package, path local directory containing source package. result data.frame errors, warnings, diagnostic messages issued package auotest-ing. function additional parameter, functions, restrict tests specified functions . default, autotest_package() returns list tests applied package without actually running . implement tests, set parameter test TRUE. Results returned tests functions behave expected, whether triggering errors, warnings, behaviour described . ideal behaviour autotest_package() return nothing (strictly, NULL), indicating tests passed successfully. See main package vignette introductory tour package.","code":"x <- autotest_package (\"<package>\")"},{"path":"https://docs.ropensci.org/autotest/index.html","id":"what-is-tested","dir":"","previous_headings":"","what":"What is tested?","title":"Automatic Package Testing","text":"package includes function lists tests currently implemented. functions returns tibble describing 27 unique tests. default behaviour autotest_package() test = FALSE uses test types identify tests applied parameter function. table returned autotest_types() can used selectively switch tests setting values test column FALSE, demonstrated .","code":"autotest_types () #> # A tibble: 27 × 8 #>    type  test_name      fn_name parameter parameter_type operation content test  #>    <chr> <chr>          <chr>   <chr>     <chr>          <chr>     <chr>   <lgl> #>  1 dummy rect_as_other  <NA>    <NA>      rectangular    Convert … \"check… TRUE  #>  2 dummy rect_compare_… <NA>    <NA>      rectangular    Convert … \"expec… TRUE  #>  3 dummy rect_compare_… <NA>    <NA>      rectangular    Convert … \"expec… TRUE  #>  4 dummy rect_compare_… <NA>    <NA>      rectangular    Convert … \"expec… TRUE  #>  5 dummy extend_rect_c… <NA>    <NA>      rectangular    Extend e… \"(Shou… TRUE  #>  6 dummy replace_rect_… <NA>    <NA>      rectangular    Replace … \"(Shou… TRUE  #>  7 dummy vector_to_lis… <NA>    <NA>      vector         Convert … \"(Shou… TRUE  #>  8 dummy vector_custom… <NA>    <NA>      vector         Custom c… \"(Shou… TRUE  #>  9 dummy double_is_int  <NA>    <NA>      numeric        Check wh… \"int p… TRUE  #> 10 dummy trivial_noise  <NA>    <NA>      numeric        Add triv… \"(Shou… TRUE  #> # ℹ 17 more rows"},{"path":"https://docs.ropensci.org/autotest/index.html","id":"how-does-it-work","dir":"","previous_headings":"","what":"How Does It Work?","title":"Automatic Package Testing","text":"package works scraping documented examples .Rd help files, using identify types parameters functions. Usage therefore first requires usage parameters demonstrated example code. described , tests can also selectively applied particular functions parameters functions, used nominate functions include tests, exclude, used nominate functions exclude tests. following code illustrates. Testing var function also tests cor cov, documented within single .Rd help file. Typing ?var shows help topic cor, examples include three functions, var, cor, cov. result details 170 tests applied var function stats package. 170 tests yield following results actually applied: 25 original 170 tests produced unexpected behaviour. fact 5 kinds tests produced 25 results: One involves conversion vector list-column representation (via (.list(<vec>))). Relatively packages accept kind input, even though relatively straightforward. following lines demonstrate tests can switched autotest-ing package. autotest_types() function, used extract information types tests, also accepts single argument listing test_name entries tests switched . tests still returned autotest_package(), test = FALSE indicate run, type “no_test” rather previous “diagnostic”.","code":"x <- autotest_package (package = \"stats\", functions = \"var\", test = FALSE) #>  #> ── autotesting stats ── #>  #> ✔ [1 / 6]: var #> ✔ [2 / 6]: cor #> ✔ [3 / 6]: cor #> ✔ [4 / 6]: cov #> ✔ [5 / 6]: cov #> ✔ [6 / 6]: cor print (x) #> # A tibble: 170 × 9 #>    type    test_name    fn_name parameter parameter_type operation content test  #>    <chr>   <chr>        <chr>   <chr>     <chr>          <chr>     <chr>   <lgl> #>  1 warning par_is_demo… var     use       <NA>           Check th… Exampl… TRUE  #>  2 warning par_is_demo… cov     y         <NA>           Check th… Exampl… TRUE  #>  3 dummy   trivial_noi… var     x         numeric        Add triv… (Shoul… TRUE  #>  4 dummy   vector_cust… var     x         vector         Custom c… (Shoul… TRUE  #>  5 dummy   vector_to_l… var     x         vector         Convert … (Shoul… TRUE  #>  6 dummy   negate_logi… var     na.rm     single logical Negate d… (Funct… TRUE  #>  7 dummy   subst_int_f… var     na.rm     single logical Substitu… (Funct… TRUE  #>  8 dummy   subst_char_… var     na.rm     single logical Substitu… should… TRUE  #>  9 dummy   single_par_… var     na.rm     single logical Length 2… Should… TRUE  #> 10 dummy   return_succ… var     (return … (return objec… Check th… <NA>    TRUE  #> # ℹ 160 more rows #> # ℹ 1 more variable: yaml_hash <chr> y <- autotest_package (package = \"stats\", functions = \"var\", test = TRUE) #> ── autotesting stats ── #>  #> ✔ [1 / 6]: var #> ✔ [2 / 6]: cor #> ✔ [3 / 6]: cor #> ✔ [4 / 6]: cov #> ✔ [5 / 6]: cov #> ✔ [6 / 6]: cor print (y) #> # A tibble: 25 × 9 #>    type       test_name fn_name parameter parameter_type operation content test  #>    <chr>      <chr>     <chr>   <chr>     <chr>          <chr>     <chr>   <lgl> #>  1 warning    par_is_d… var     use       <NA>           Check th… \"Examp… TRUE  #>  2 warning    par_is_d… cov     y         <NA>           Check th… \"Examp… TRUE  #>  3 diagnostic vector_t… var     x         vector         Convert … \"Funct… TRUE  #>  4 diagnostic subst_in… var     na.rm     single logical Substitu… \"(Func… TRUE  #>  5 diagnostic vector_t… var     x         vector         Convert … \"Funct… TRUE  #>  6 diagnostic vector_t… var     y         vector         Convert … \"Funct… TRUE  #>  7 diagnostic single_c… cor     use       single charac… upper-ca… \"is ca… TRUE  #>  8 diagnostic single_c… cor     method    single charac… upper-ca… \"is ca… TRUE  #>  9 diagnostic vector_c… cor     x         vector         Custom c… \"Funct… TRUE  #> 10 diagnostic vector_c… cor     x         vector         Custom c… \"Funct… TRUE  #> # ℹ 15 more rows #> # ℹ 1 more variable: yaml_hash <chr> unique (y$operation) #> [1] \"Check that parameter usage is demonstrated\"      #> [2] \"Convert vector input to list-columns\"            #> [3] \"Substitute integer values for logical parameter\" #> [4] \"upper-case character parameter\"                  #> [5] \"Custom class definitions for vector input\" types <- autotest_types (notest = \"vector_to_list_col\") y <- autotest_package (     package = \"stats\", functions = \"var\",     test = TRUE, test_data = types ) #> ── autotesting stats ── #>  #> ✔ [1 / 6]: var #> ✔ [2 / 6]: cor #> ✔ [3 / 6]: cor #> ✔ [4 / 6]: cov #> ✔ [5 / 6]: cov #> ✔ [6 / 6]: cor print (y) #> # A tibble: 22 × 9 #>    type       test_name fn_name parameter parameter_type operation content test  #>    <chr>      <chr>     <chr>   <chr>     <chr>          <chr>     <chr>   <lgl> #>  1 warning    par_is_d… var     use       <NA>           Check th… Exampl… TRUE  #>  2 warning    par_is_d… cov     y         <NA>           Check th… Exampl… TRUE  #>  3 diagnostic subst_in… var     na.rm     single logical Substitu… (Funct… TRUE  #>  4 diagnostic single_c… cor     use       single charac… upper-ca… is cas… TRUE  #>  5 diagnostic single_c… cor     method    single charac… upper-ca… is cas… TRUE  #>  6 diagnostic vector_c… cor     x         vector         Custom c… Functi… TRUE  #>  7 diagnostic vector_c… cor     x         vector         Custom c… Functi… TRUE  #>  8 diagnostic single_c… cor     method    single charac… upper-ca… is cas… TRUE  #>  9 diagnostic single_c… cor     use       single charac… upper-ca… is cas… TRUE  #> 10 diagnostic single_c… cor     use       single charac… upper-ca… is cas… TRUE  #> # ℹ 12 more rows #> # ℹ 1 more variable: yaml_hash <chr>"},{"path":"https://docs.ropensci.org/autotest/index.html","id":"can-autotest-automatically-create-tests-in-my-tests-directory","dir":"","previous_headings":"","what":"Can autotest automatically create tests in my tests directory?","title":"Automatic Package Testing","text":"yet, possible soon. meantime, testthat expectations, listed main package functions, enable autotest used package’s test suite.","code":""},{"path":"https://docs.ropensci.org/autotest/index.html","id":"prior-work","dir":"","previous_headings":"","what":"Prior work","title":"Automatic Package Testing","text":"great-expectations framework python, described medium article. QuickCheck Haskell mutate ruby mutant mutation R code ","code":""},{"path":"https://docs.ropensci.org/autotest/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Automatic Package Testing","text":"Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/autotest/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Automatic Package Testing","text":"contributions project gratefully acknowledged using allcontributors package following -contributors specification. Contributions kind welcome!","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/autotest/reference/at_yaml_template.html","id":null,"dir":"Reference","previous_headings":"","what":"at_yaml_template — at_yaml_template","title":"at_yaml_template — at_yaml_template","text":"Generate 'yaml' template 'autotest'.","code":""},{"path":"https://docs.ropensci.org/autotest/reference/at_yaml_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"at_yaml_template — at_yaml_template","text":"","code":"at_yaml_template(loc = tempdir())"},{"path":"https://docs.ropensci.org/autotest/reference/at_yaml_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"at_yaml_template — at_yaml_template","text":"loc Location generate template file. Append filename '.yaml' suffix overwrite default name 'autotest.yaml', otherwise parameter used specify directory .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/autotest/reference/autotest-package.html","id":null,"dir":"Reference","previous_headings":"","what":"autotest: Automatic Package Testing — autotest-package","title":"autotest: Automatic Package Testing — autotest-package","text":"Automatic testing R packages via simple YAML schema.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/autotest/reference/autotest-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"autotest: Automatic Package Testing — autotest-package","text":"Maintainer: Mark Padgham mark.padgham@email.com","code":""},{"path":"https://docs.ropensci.org/autotest/reference/autotest_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"autotest_obj class definition — autotest_obj","title":"autotest_obj class definition — autotest_obj","text":"function exists provide class definitions test objects, intended called directly.","code":""},{"path":"https://docs.ropensci.org/autotest/reference/autotest_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"autotest_obj class definition — autotest_obj","text":"","code":"autotest_obj(   package = NA_character_,   package_loc = NULL,   test_name = NA_character_,   fn_name = NA_character_,   parameters = list(),   parameter_types = NA_character_,   class = NULL,   classes = NULL,   env = new.env(),   test = FALSE,   quiet = FALSE )"},{"path":"https://docs.ropensci.org/autotest/reference/autotest_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"autotest_obj class definition — autotest_obj","text":"package Name package object constructed. package_loc Location package local system (source packages ) test_name Name test (use autotest_types get test names). fn_name Name function tested. parameters Names parameters function. parameter_types Types input parameters. class Class individual parameter. classes Classes parameters. env Environment tests run. test FALSE, return descriptions tests run test = TRUE, without actually running . quiet FALSE, issue progress messages testing object.","code":""},{"path":"https://docs.ropensci.org/autotest/reference/autotest_package.html","id":null,"dir":"Reference","previous_headings":"","what":"autotest_package — autotest_package","title":"autotest_package — autotest_package","text":"Automatically test entire package converting examples yaml format submitting autotest_yaml function.","code":""},{"path":"https://docs.ropensci.org/autotest/reference/autotest_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"autotest_package — autotest_package","text":"","code":"autotest_package(   package = \".\",   functions = NULL,   exclude = NULL,   test = FALSE,   test_data = NULL,   quiet = FALSE )"},{"path":"https://docs.ropensci.org/autotest/reference/autotest_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"autotest_package — autotest_package","text":"package Name package, either Path local package source Name installed package Full path location installed package .libPaths, Default presumes current directory within package tested. functions Optional character vector containing names functions nominated package included 'autotesting'. exclude Optional character vector containing names functions nominated package excluded 'autotesting'. test FALSE, return descriptions tests run test = TRUE, without actually running . test_data Result returned calling either autotest_types autotest_package test = FALSE contains list tests conducted. tests additional flag, test, defaults TRUE. Setting tests FALSE avoid running test = TRUE. quiet 'FALSE', provide printed output screen.","code":""},{"path":"https://docs.ropensci.org/autotest/reference/autotest_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"autotest_package — autotest_package","text":"autotest_package object derived tibble tbl_df object. one row test, following nine columns: type type result, either \"dummy\" test = FALSE, one \"error\", \"warning\", \"diagnostic\", \"message\". test_name Name test fn_name Name function tested parameter Name parameter tested parameter_type Expected type parameter identified autotest. operation Description test content test = FALSE, expected behaviour test; test = TRUE, observed discrepancy expected behaviour test FALSE (default), list tests without implementing , otherwise implement tests. yaml_hash' unique hash may used extract yaml` specification test. columns may contain NA values, explained Note.","code":""},{"path":"https://docs.ropensci.org/autotest/reference/autotest_package.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"autotest_package — autotest_package","text":"columns may contain NA values, including: parameer parameter_type, tests applied entire functions, tests return values. test_name warnings errors generated \"normal\" function calls generated directly example code, case type \"warning\" \"error\", content contain content corresponding message.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/autotest/reference/autotest_types.html","id":null,"dir":"Reference","previous_headings":"","what":"autotest_types — autotest_types","title":"autotest_types — autotest_types","text":"List types 'autotests' currently implemented.","code":""},{"path":"https://docs.ropensci.org/autotest/reference/autotest_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"autotest_types — autotest_types","text":"","code":"autotest_types(notest = NULL)"},{"path":"https://docs.ropensci.org/autotest/reference/autotest_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"autotest_types — autotest_types","text":"notest Character string names tests switched setting test column FALSE. Run function first without parameter get names, re-run parameter switch specified tests .","code":""},{"path":"https://docs.ropensci.org/autotest/reference/autotest_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"autotest_types — autotest_types","text":"autotest object row listing one unique type test can applied every parameter (appropriate class) function.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/autotest/reference/autotest_yaml.html","id":null,"dir":"Reference","previous_headings":"","what":"autotest_yaml — autotest_yaml","title":"autotest_yaml — autotest_yaml","text":"Automatically test inputs functions specified 'yaml' template.","code":""},{"path":"https://docs.ropensci.org/autotest/reference/autotest_yaml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"autotest_yaml — autotest_yaml","text":"","code":"autotest_yaml(   yaml = NULL,   filename = NULL,   test = TRUE,   test_data = NULL,   quiet = FALSE )"},{"path":"https://docs.ropensci.org/autotest/reference/autotest_yaml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"autotest_yaml — autotest_yaml","text":"yaml 'yaml' template character vector, either hand-coded potentially loaded via readLines function similar. generally left default 'NULL', template specified 'filename' parameter. filename Name (potentially including path) file containing 'yaml' template. See at_yaml_template details template. Default uses template generated function, held local './tests' directory. test FALSE, return descriptions tests run test = TRUE, without actually running . test_data Result returned calling either autotest_types autotest_package test = FALSE contains list tests conducted. tests additional flag, test, defaults TRUE. Setting tests FALSE avoid running test = TRUE. quiet 'FALSE', provide printed output screen.","code":""},{"path":"https://docs.ropensci.org/autotest/reference/autotest_yaml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"autotest_yaml — autotest_yaml","text":"autotest_pkg object, derived tibble, detailing instances unexpected behaviour every parameter every function.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/autotest/reference/autotest_yaml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"autotest_yaml — autotest_yaml","text":"","code":"if (FALSE) { yaml_list <- examples_to_yaml (package = \"stats\", functions = \"reshape\") res <- autotest_yaml (yaml = yaml_list) }"},{"path":"https://docs.ropensci.org/autotest/reference/examples_to_yaml.html","id":null,"dir":"Reference","previous_headings":"","what":"examples_to_yaml — examples_to_yaml","title":"examples_to_yaml — examples_to_yaml","text":"Convert examples specified package, optionally restricted one specified functions, list 'autotest' 'yaml' objects use automatically test package.","code":""},{"path":"https://docs.ropensci.org/autotest/reference/examples_to_yaml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"examples_to_yaml — examples_to_yaml","text":"","code":"examples_to_yaml(   package = NULL,   functions = NULL,   exclude = NULL,   quiet = FALSE )"},{"path":"https://docs.ropensci.org/autotest/reference/examples_to_yaml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"examples_to_yaml — examples_to_yaml","text":"package Name package, either Path local package source Name installed package Full path location installed package .libPaths, Default presumes current directory within package tested. functions specified, names functions examples obtained. exclude Names functions exclude 'yaml' template quiet 'FALSE', provide printed output screen.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_no_err.html","id":null,"dir":"Reference","previous_headings":"","what":"expect_autotest_no_err — expect_autotest_no_err","title":"expect_autotest_no_err — expect_autotest_no_err","text":"Expect autotest_package() clear errors","code":""},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_no_err.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"expect_autotest_no_err — expect_autotest_no_err","text":"","code":"expect_autotest_no_err(object)"},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_no_err.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"expect_autotest_no_err — expect_autotest_no_err","text":"object autotest object tested","code":""},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_no_err.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"expect_autotest_no_err — expect_autotest_no_err","text":"(invisibly) object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_no_testdata.html","id":null,"dir":"Reference","previous_headings":"","what":"expect_autotest_no_testdata — expect_autotest_no_testdata","title":"expect_autotest_no_testdata — expect_autotest_no_testdata","text":"Expect autotest_package() clear errors tests switched ","code":""},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_no_testdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"expect_autotest_no_testdata — expect_autotest_no_testdata","text":"","code":"expect_autotest_no_testdata(object = NULL)"},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_no_testdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"expect_autotest_no_testdata — expect_autotest_no_testdata","text":"object used , required testthat expectations","code":""},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_no_testdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"expect_autotest_no_testdata — expect_autotest_no_testdata","text":"(invisibly) autotest object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_no_warn.html","id":null,"dir":"Reference","previous_headings":"","what":"expect_autotest_no_warn — expect_autotest_no_warn","title":"expect_autotest_no_warn — expect_autotest_no_warn","text":"Expect autotest_package() clear warnings","code":""},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_no_warn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"expect_autotest_no_warn — expect_autotest_no_warn","text":"","code":"expect_autotest_no_warn(object)"},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_no_warn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"expect_autotest_no_warn — expect_autotest_no_warn","text":"object autotest object tested","code":""},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_no_warn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"expect_autotest_no_warn — expect_autotest_no_warn","text":"(invisibly) object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_notes.html","id":null,"dir":"Reference","previous_headings":"","what":"expect_autotest_notes — expect_autotest_notes","title":"expect_autotest_notes — expect_autotest_notes","text":"Expect test_data param autotest_package additional note column explaining tests switched .","code":""},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_notes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"expect_autotest_notes — expect_autotest_notes","text":"","code":"expect_autotest_notes(object)"},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_notes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"expect_autotest_notes — expect_autotest_notes","text":"object autotest object tested","code":""},{"path":[]},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_testdata.html","id":null,"dir":"Reference","previous_headings":"","what":"expect_autotest_testdata — expect_autotest_testdata","title":"expect_autotest_testdata — expect_autotest_testdata","text":"Expect autotest_package() clear errors tests switched , note column explaining tests run.","code":""},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_testdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"expect_autotest_testdata — expect_autotest_testdata","text":"","code":"expect_autotest_testdata(object)"},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_testdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"expect_autotest_testdata — expect_autotest_testdata","text":"object autotest_package object test column flagging tests run local package.","code":""},{"path":"https://docs.ropensci.org/autotest/reference/expect_autotest_testdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"expect_autotest_testdata — expect_autotest_testdata","text":"(invisibly) autotest object","code":""},{"path":[]}]
